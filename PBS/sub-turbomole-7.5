#!/bin/bash

nodes=1
cores=1
mem=2000
walltime=504
queue=main

if [ $# -lt 1 ]
then
  echo "Usage: $0 program_name [parameters]"
  echo "Parameters:"
  echo "-q queue (default - $queue)"
  echo "-n nodes (default - $nodes)"
  echo "-p cores (per node, default - $cores)"
  echo "-m memory (per node, in MB, default - $mem)"
  echo "-w walltime (in hours, default - $walltime)"
  echo "-i \"program_parameter1 program_parameter2 ...\" (list of program parameters)"
  exit 1
fi

param_err=0
unset program_name
unset p_param

until [ -z $1 ]
do
        if [ $1 = "-q" ]
        then
                queue="$2"
                shift; shift
        elif [ $1 = "-n" ]
        then
                nodes="$2"
                shift; shift
                if [ -n "`echo $nodes | grep '[^[:digit:]]'`" ]
                then
                        echo "Nodes value must be a number!"
                        param_err=1
                fi

        elif [ $1 = "-p" ]
        then
                cores="$2"
                shift; shift
                if [ -n "`echo $cores | grep '[^[:digit:]]'`" ]
                then
                        echo "Cores value must be a number!"
                        param_err=1
                fi
        elif [ $1 = "-m" ]
        then
                mem=$2
                shift; shift
                if [ -n "`echo $mem | grep '[^[:digit:]]'`" ]
                then
                        echo "Memory size must be a number!"
                        param_err=1
                fi
        elif [ $1 = "-w" ]
        then
                walltime="$2"
                shift; shift
                if [ -n "`echo $walltime | grep '[^[:digit:]]'`" ]
                then
                        echo "Walltime must be a number!"
                        param_err=1
                fi
        elif [ $1 = "-i" ]
        then
                p_param=$2
                shift; shift
        elif [ -n "`echo $1 | grep ^-`" ]
        then
                echo "Unknown option: $1"
                param_err=1
        else
                if [ -z "$program_name" ]
                then
                        program_name=$1
                        shift
                        if [ ! -f "/usr/local/turbomole/TURBOMOLE75/bin/em64t-unknown-linux-gnu_mpi/$program_name" -a ! -f "./$program_name" -a "$program_name" != "jobex" -a "$program_name" != "NumForce" ]
                        then
                                echo "There is no $program_name in Turbomole package"
                                param_err=1

                        fi
                else
                        echo "Unknown parameter: $1"
                        shift
                        param_err=1
                fi
        fi
done


if [ -z "$program_name" ]
then
        echo "There is no program name specification!"
        param_err=1
fi

nc=$(( $nodes * $cores ))


if [ $nc -ne "1" ]
then
        PARCH=MPI
fi



if [ $param_err -eq 1 ]
then
        exit 1
fi

program_f=$(basename "$program_name")
program_fname="${program_f%.*}"


WD=`pwd`

echo "The job is being submitted with the following parameters:"
echo
printf "\t%-12s %s\n" "p_param" "$p_param"
printf "\t%-12s %s\n" "queue" $queue
printf "\t%-12s %s\n" "nodes" $nodes
printf "\t%-12s %s (per node)\n" "cores" $cores
printf "\t%-12s %s MB (per node)\n" "memory" $mem
printf "\t%-12s %s hours\n" "walltime" $walltime
echo "If the job hangs, you may try to specify other values of nodes and cores"
echo

cat << EOF | qsub -r n
#!/bin/bash
#PBS -q $queue
#PBS -l select=$nodes:ncpus=$cores:mpiprocs=$cores:mem=${mem}MB
#PBS -l place=scatter
#PBS -m be
#PBS -N ${program_fname:0:15}
#PBS -l software=TURBOMOLE_7.5
#PBS -l walltime=${walltime}:00:00

module load turbomole/7.5

cd $WD

export PARA_ARCH=$PARCH
export PATH=\$TURBODIR/scripts:\$PATH
export PATH=\$TURBODIR/bin/em64t-unknown-linux-gnu_mpi:\$PATH
export MPI_REMSH=pbs_tmrsh
export PARNODES=$nc
export HOSTS_FILE=\$PBS_NODEFILE
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$TURBODIR/libso/em64t-unknown-linux-gnu_mpi

export TURBOTMPDIR=\$TMPDIR/m
mkdir -p \$TURBOTMPDIR
touch \$TURBOTMPDIR/\$PBS_JOBID

$program_name $p_param > $program_name.log

rm -rf \$TURBOTMPDIR

EOF






